generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userid      Int       @id @default(autoincrement())
  imagepath       String?
  firstname       String    @db.VarChar(25)
  middlename      String?   @db.VarChar(25)
  lastname        String    @db.VarChar(25)
  role        String    @db.VarChar(50)
  status          Status    
  username    String      @unique @db.VarChar(50)
  password    String
  userdeleted Boolean   @default(false)
  sales           Sales[]
  purchases       Purchase[]
}

model Customer {
  customerid      Int       @id @default(autoincrement())
  firstname            String    @db.VarChar(50)
  middlename            String?    @db.VarChar(50)
  lastname            String    @db.VarChar(50)
  contactnumber   Int?
  Sales           Sales[]
}

model Sales {
  salesid         Int       @id @default(autoincrement())
  customerid      Int
  userid      Int
  invoiceno       Int
  date            DateTime
  status          TransactionStatus
  frommilling    Boolean
  onepercenttax   Float
  totalamount     Float
  user        User  @relation(fields: [salesid], references: [userid])
  customer    Customer  @relation(fields: [customerid], references: [customerid])
  SalesItems      SalesItem[]
}

model SalesItem {
  salesitemid     Int       @id @default(autoincrement())
  salesid         Int
  itemid          Int
  inventoryid     Int?
  quantity        Int
  weight          Float?
  priceperunit    Float?
  Sales           Sales     @relation(fields: [salesitemid], references: [salesid])
  Item            Item      @relation(fields: [itemid], references: [itemid])
}

model Supplier {
  supplierid      Int       @id @default(autoincrement())
  suppliername            String    @db.VarChar(150)
  contactnumber   BigInt
  Purchase       Purchase[]
  @@unique([suppliername, contactnumber])
}

model Purchase {
  purchaseid         Int       @id @default(autoincrement())
  userid             Int
  supplierid         Int
  date               DateTime @default(now())
  status             TransactionStatus
  totalamount         Float
  updatedat          DateTime? @updatedAt
  User            User  @relation(fields: [userid], references: [userid])
  Supplier        Supplier  @relation(fields: [supplierid], references: [supplierid])
  PurchaseItems       PurchaseItem[]
}

model PurchaseItem {
  purchaseitemid  Int     @id @default(autoincrement())
  purchaseid      Int
  itemid          Int
  noofsack        Int?
  unitofmeasurement String?
  priceperunit    Float?
  totalweight          Float?
  Purchase        Purchase    @relation(fields: [purchaseid], references: [purchaseid])
  Item            Item        @relation(fields: [itemid], references: [itemid])
}

model Item {
  itemid        Int      @id @default(autoincrement())
  name          String?  @db.VarChar(50)
  type          ItemType
  stock      Int?
  unitofmeasurement String? @db.VarChar(50)
  unitprice    Float?
  reorderlevel  Int? 
  criticallevel Int?
  createdat    DateTime  @default(now())
  updatedat    DateTime? @updatedAt
  itemdeleted Boolean   @default(false)
  salesitem    SalesItem[]
  purchaseitem PurchaseItem[]
  itemimage    ItemImage[]
}

model ItemImage {
  imageid      Int       @id @default(autoincrement())
  itemid       Int
  imagepath     String
  Item         Item      @relation(fields: [itemid], references: [itemid])
}


enum Status {
  active
  inactive
}

enum TransactionStatus {
  pending
  paid
  cancelled
}

enum ItemType {
  bigas
  palay
  resico
}